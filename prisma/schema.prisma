// Updated Prisma schema with authentication and payments

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Add this field
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  plan          UserPlan  @default(FREE)
  stripeCustomerId String? @unique
  subscriptionId String?
  subscriptionStatus String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  links    Link[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Link {
  id        String   @id @default(cuid())
  code      String   @unique
  type      LinkType
  payload   String   @db.Text
  iosUrl    String?
  androidUrl String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans     Scan[]
  
  @@map("links")
}

model Scan {
  id         String   @id @default(cuid())
  linkId     String
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?  @db.Text
  deviceType String?
  os         String?
  city       String?
  country    String?
  
  link       Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  
  @@map("scans")
}

enum UserRole {
  USER
  ADMIN
}

enum UserPlan {
  FREE
  PREMIUM
}

enum LinkType {
  URL
  PDF
  VCARD
  MESSAGE
  APP_DOWNLOAD
}
